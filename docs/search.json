[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R for the Geosciences",
    "section": "",
    "text": "About\nThese are the materials for the short course “Introduction to R for the Geosciences” at EGU 2024.\nWhen and where? Wednesday, April 17, 19:00-20:00, Room N1"
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Introduction to R for the Geosciences",
    "section": "Abstract",
    "text": "Abstract\nR is a free, open-source programming language popularly used for data science, statistical analysis, and visualization. Spatial data analysis has been strongly supported by the R community, that provides tools for data reading, writing and downloading, and for spatial processing, visualizing and modelling. The R-Spatial package ecosystem relies on common libraries for geospatial analysis such as GDAL, GEOS, and PROJ. In this workshop, we will introduce participants to spatial data analysis in R. For this, there will be demonstrations of key R packages like {sf}, {stars}, {terra} for vector and raster data processing. We will also focus on spatial data visualization using the {tmap} package. We will focus on datasets strongly used by the Geoscience community, including satellite imagery."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Introduction to R for the Geosciences",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nTime\nTopic\n\n\n\n\n19:00-19:10\nIntroduction to R-Spatial\n\n\n19:10-19:30\nVector data\n\n\n19:30-19:50\nRaster data\n\n\n19:50-20:00\nQ&A"
  },
  {
    "objectID": "index.html#pre-requisites",
    "href": "index.html#pre-requisites",
    "title": "Introduction to R for the Geosciences",
    "section": "Pre-requisites",
    "text": "Pre-requisites\n\nR installation\nA working installation of R (follow CRAN recommendations for your set-up).\n\n\nR packages\nPlease run those commands inside the R console:\n# Install the remotes package from CRAN Repo\ninstall.packages(remotes)\n\n# Install workshop and its dependencies\nremotes::install_github(\"loreabad6/egu24-sc-R4geosciences\")\nYou can follow along in your own R script, or clone the repository to tun the Quarto documents interactively.\n\n\n\n\nXie, Yihui. 2014. “Knitr: A Comprehensive Tool for Reproducible Research in R.” In Implementing Reproducible Computational Research, edited by Victoria Stodden, Friedrich Leisch, and Roger D. Peng. Chapman; Hall/CRC.\n\n\n———. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/.\n\n\n———. 2023. Knitr: A General-Purpose Package for Dynamic Report Generation in r. https://yihui.org/knitr/."
  },
  {
    "objectID": "rspatial.html",
    "href": "rspatial.html",
    "title": "1  Intro to R-spatial",
    "section": "",
    "text": "Add brief introduction to R-spatial ecosystem\n\n\n\n\n\nXie, Yihui. 2014. “Knitr: A Comprehensive Tool for Reproducible Research in R.” In Implementing Reproducible Computational Research, edited by Victoria Stodden, Friedrich Leisch, and Roger D. Peng. Chapman; Hall/CRC.\n\n\n———. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/.\n\n\n———. 2023. Knitr: A General-Purpose Package for Dynamic Report Generation in r. https://yihui.org/knitr/."
  },
  {
    "objectID": "vector.html#read-data-into-r",
    "href": "vector.html#read-data-into-r",
    "title": "2  Vector data",
    "section": "2.1 Read data into R",
    "text": "2.1 Read data into R\nReading data into R can be done from a local file or a remote file. If you downloaded the workshop repository, you will find the data in the data directory. But, we can also fetch the data from GitHub directly, without the need to download it.\n\nrivers = read_sf(\n  \"https://github.com/loreabad6/egu24-sc-R4geosciences/raw/main/data/nz-river-centrelines-topo-1500k.gpkg\"\n)\n\nAs you may have guessed from the object name, this is a river centreline dataset in New Zealand (Topo, 1:500k). This data is from Land Information New Zealand\nWe can now print the data to see how it looks like.\n\nrivers\n\nSimple feature collection with 7894 features and 0 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 1090841 ymin: 4753217 xmax: 2085682 ymax: 6190544\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n# A tibble: 7,894 × 1\n                                                                            geom\n                                                           &lt;MULTILINESTRING [m]&gt;\n 1 ((1188893 4876720, 1188961 4876789, 1189209 4876888, 1189352 4877037, 118941…\n 2 ((1212357 4985134, 1212190 4985017, 1212190 4984899, 1212240 4984833, 121222…\n 3        ((1793234 5835222, 1793051 5835188, 1793001 5835221, 1792804 5835245))\n 4 ((1237766 4958688, 1237833 4958555, 1237861 4958499, 1237950 4958321, 123818…\n 5 ((1479132 5112613, 1479112 5112458, 1479143 5112127, 1479307 5111749, 147945…\n 6 ((1331799 4889014, 1331743 4889153, 1331644 4889637, 1331644 4889652, 133164…\n 7 ((1421067 5030500, 1421156 5030431, 1421280 5030411, 1421412 5030354, 142154…\n 8 ((1137668 4888410, 1137186 4888320, 1136813 4888447, 1136732 4888437, 113655…\n 9 ((1460473 5142519, 1460661 5141978, 1460657 5141736, 1460724 5141519, 146086…\n10 ((1473259 5181908, 1473317 5181722, 1473317 5181472, 1473417 5181388, 147353…\n# ℹ 7,884 more rows\n\n\nAn sf object shows each observation in a row and each attribute in a column. The object header includes relevant spatial information about the object, like the number of rows and columns, the geometry type, dimensions, bounding box and the CRS. Our rivers object has only one column, the geometry column.\n\n\n\n\n\n\nNote\n\n\n\nYou can dive deeper into sf objects and simple features in the package documentation here."
  },
  {
    "objectID": "vector.html#projections-and-transformations",
    "href": "vector.html#projections-and-transformations",
    "title": "2  Vector data",
    "section": "2.2 Projections and transformations",
    "text": "2.2 Projections and transformations\nGeographical data has a Coordinate Reference System (CRS) that allows its location on the Earth surface. We can see the CRS of our rivers object using sf::st_crs() and we can easily transform the CRS using sf::st_transform().\n\nst_crs(rivers)\n\nCoordinate Reference System:\n  User input: NZGD2000 / New Zealand Transverse Mercator 2000 \n  wkt:\nPROJCRS[\"NZGD2000 / New Zealand Transverse Mercator 2000\",\n    BASEGEOGCRS[\"NZGD2000\",\n        DATUM[\"New Zealand Geodetic Datum 2000\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4167]],\n    CONVERSION[\"New Zealand Transverse Mercator 2000\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",173,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",1600000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"New Zealand - North Island, South Island, Stewart Island - onshore.\"],\n        BBOX[-47.33,166.37,-34.1,178.63]],\n    ID[\"EPSG\",2193]]\n\nst_transform(rivers, \"EPSG:8857\")\n\nSimple feature collection with 7894 features and 0 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 13541120 ymin: -5703283 xmax: 15383260 ymax: -4285790\nProjected CRS: WGS 84 / Equal Earth Greenwich\n# A tibble: 7,894 × 1\n                                                                            geom\n *                                                         &lt;MULTILINESTRING [m]&gt;\n 1 ((13666283 -5587607, 13666417 -5587547, 13666759 -5587469, 13667045 -5587338…\n 2 ((13793866 -5486106, 13793590 -5486208, 13793478 -5486320, 13793464 -5486386…\n 3 ((15102339 -4651778, 15102131 -4651817, 15102106 -4651784, 15101929 -4651764…\n 4 ((13793768 -5512762, 13793707 -5512892, 13793682 -5512947, 13793600 -5513121…\n 5 ((14180046 -5373670, 14179883 -5373819, 14179614 -5374140, 14179436 -5374509…\n 6 ((13821294 -5583471, 13821371 -5583337, 13821736 -5582874, 13821750 -5582860…\n 7 ((14045490 -5451552, 14045517 -5451621, 14045623 -5451643, 14045704 -5451702…\n 8 ((13627195 -5573120, 13626635 -5573172, 13626393 -5573025, 13626304 -5573028…\n 9 ((14188313 -5344329, 14188013 -5344858, 14187789 -5345092, 14187659 -5345304…\n10 ((14236840 -5306286, 14236731 -5306469, 14236506 -5306712, 14236532 -5306795…\n# ℹ 7,884 more rows\n\n\n\n\nCode\npar(mar = c(0,0,2,0))\nrivers |&gt; plot(main = \"EPSG: 2193\")\n# WGS 84 / Equal Earth Greenwich\nst_transform(rivers, 8857) |&gt; plot(main = \"EPSG: 8857\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCRS concepts\n\n\n\n Section in Spatial Data Science (Pebesma_2023?)\n Section in Geocomputation with R (lovelace_geocomputation_2019?)."
  },
  {
    "objectID": "vector.html#geometrical-operations",
    "href": "vector.html#geometrical-operations",
    "title": "2  Vector data",
    "section": "2.3 Geometrical operations",
    "text": "2.3 Geometrical operations\nBasic geometric operations such as calculating the length or area of a geometry are supported. Let’s create a new column in our data with the river length as:\n\nrivers[\"length\"] = st_length(rivers)\nrivers\n\nSimple feature collection with 7894 features and 1 field\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 1090841 ymin: 4753217 xmax: 2085682 ymax: 6190544\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n# A tibble: 7,894 × 2\n                                                                     geom length\n                                                    &lt;MULTILINESTRING [m]&gt;    [m]\n 1 ((1188893 4876720, 1188961 4876789, 1189209 4876888, 1189352 4877037,… 73029.\n 2 ((1212357 4985134, 1212190 4985017, 1212190 4984899, 1212240 4984833,… 45755.\n 3 ((1793234 5835222, 1793051 5835188, 1793001 5835221, 1792804 5835245))   445.\n 4 ((1237766 4958688, 1237833 4958555, 1237861 4958499, 1237950 4958321,… 32311.\n 5 ((1479132 5112613, 1479112 5112458, 1479143 5112127, 1479307 5111749,…  1391.\n 6 ((1331799 4889014, 1331743 4889153, 1331644 4889637, 1331644 4889652,… 61151.\n 7 ((1421067 5030500, 1421156 5030431, 1421280 5030411, 1421412 5030354,… 36612.\n 8 ((1137668 4888410, 1137186 4888320, 1136813 4888447, 1136732 4888437,…  1622.\n 9 ((1460473 5142519, 1460661 5141978, 1460657 5141736, 1460724 5141519,…  2582.\n10 ((1473259 5181908, 1473317 5181722, 1473317 5181472, 1473417 5181388,… 53171.\n# ℹ 7,884 more rows\n\n\nTo show other operations, we will load another dataset. This are administrative areas in New Zealand. The data comes from the spData package, which is a data package that has some example datasets.\n\ndata(\"nz\", package = \"spData\")\nnz\n\nSimple feature collection with 16 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 1090144 ymin: 4748537 xmax: 2089533 ymax: 6191874\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\nFirst 10 features:\n                Name Island Land_area Population Median_income Sex_ratio\n1          Northland  North 12500.561     175500         23400 0.9424532\n2           Auckland  North  4941.573    1657200         29600 0.9442858\n3            Waikato  North 23900.036     460100         27900 0.9520500\n4      Bay of Plenty  North 12071.145     299900         26200 0.9280391\n5           Gisborne  North  8385.827      48500         24400 0.9349734\n6        Hawke's Bay  North 14137.524     164000         26100 0.9238375\n7           Taranaki  North  7254.480     118000         29100 0.9569363\n8  Manawatu-Wanganui  North 22220.608     234500         25000 0.9387734\n9         Wellington  North  8048.553     513900         32700 0.9335524\n10        West Coast  South 23245.456      32400         26900 1.0139072\n                             geom\n1  MULTIPOLYGON (((1745493 600...\n2  MULTIPOLYGON (((1803822 590...\n3  MULTIPOLYGON (((1860345 585...\n4  MULTIPOLYGON (((2049387 583...\n5  MULTIPOLYGON (((2024489 567...\n6  MULTIPOLYGON (((2024489 567...\n7  MULTIPOLYGON (((1740438 571...\n8  MULTIPOLYGON (((1866732 566...\n9  MULTIPOLYGON (((1881590 548...\n10 MULTIPOLYGON (((1557042 531...\n\nsummary(nz)\n\n     Name              Island            Land_area         Population     \n Length:16          Length:16          Min.   :  422.2   Min.   :  32400  \n Class :character   Class :character   1st Qu.: 8301.5   1st Qu.:  51325  \n Mode  :character   Mode  :character   Median :12285.9   Median : 169750  \n                                       Mean   :16505.5   Mean   : 299200  \n                                       3rd Qu.:23409.1   3rd Qu.: 339950  \n                                       Max.   :44504.5   Max.   :1657200  \n Median_income     Sex_ratio                 geom   \n Min.   :23400   Min.   :0.9238   MULTIPOLYGON :16  \n 1st Qu.:26000   1st Qu.:0.9346   epsg:2193    : 0  \n Median :27050   Median :0.9477   +proj=tmer...: 0  \n Mean   :27375   Mean   :0.9518                     \n 3rd Qu.:29200   3rd Qu.:0.9613                     \n Max.   :32700   Max.   :1.0139                     \n\n\nWe proceed to filter our data to one of NZ regions, Gisborne.\n\n(gisborne = nz[nz$Name == \"Gisborne\", ])\n\nSimple feature collection with 1 feature and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 1959096 ymin: 5674920 xmax: 2089533 ymax: 5833212\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n      Name Island Land_area Population Median_income Sex_ratio\n5 Gisborne  North  8385.827      48500         24400 0.9349734\n                            geom\n5 MULTIPOLYGON (((2024489 567...\n\n\n\nplot(nz$geom)\nplot(gisborne$geom)\n\n\n\n\n\n\n\n\n\n\n\nNow, we can do operations like spatial filters and operations. Let’s try filter the river data for the Gisborne region.\n\nrivers |&gt; st_intersection(gisborne)\n\nError in geos_op2_geom(\"intersection\", x, y, ...): st_crs(x) == st_crs(y) is not TRUE\n\n\nThat gave us an error since the data is not projected in to the same CRS.\n\ngisborne = st_transform(gisborne, st_crs(rivers))\n\nLet’s try that again.\n\nrivers |&gt; st_intersection(gisborne)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\nSimple feature collection with 286 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 1964161 ymin: 5676307 xmax: 2085682 ymax: 5829474\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n# A tibble: 286 × 8\n   length Name     Island Land_area Population Median_income Sex_ratio\n *    [m] &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;         &lt;int&gt;     &lt;dbl&gt;\n 1 25580. Gisborne North      8386.      48500         24400     0.935\n 2 55146. Gisborne North      8386.      48500         24400     0.935\n 3 30760. Gisborne North      8386.      48500         24400     0.935\n 4 28458. Gisborne North      8386.      48500         24400     0.935\n 5 29961. Gisborne North      8386.      48500         24400     0.935\n 6 25386. Gisborne North      8386.      48500         24400     0.935\n 7 28251. Gisborne North      8386.      48500         24400     0.935\n 8 28476. Gisborne North      8386.      48500         24400     0.935\n 9 29663. Gisborne North      8386.      48500         24400     0.935\n10  9291. Gisborne North      8386.      48500         24400     0.935\n# ℹ 276 more rows\n# ℹ 1 more variable: geom &lt;LINESTRING [m]&gt;\n\n\nWe just intersected the river data with the data in the gisborne object. What we are doing is an inner spatial join, where only those river linestrings that intersect the gisborne object will stay. Another way to do this is:\n\nrivers |&gt; st_join(gisborne, left = FALSE, join = st_intersects)\n\nSimple feature collection with 286 features and 7 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 1964161 ymin: 5665081 xmax: 2085682 ymax: 5830551\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n# A tibble: 286 × 8\n                                   geom length Name  Island Land_area Population\n *                &lt;MULTILINESTRING [m]&gt;    [m] &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 ((2020380 5682629, 2020497 5682630,… 25580. Gisb… North      8386.      48500\n 2 ((2047236 5739047, 2047119 5738963,… 55146. Gisb… North      8386.      48500\n 3 ((1992989 5756684, 1992939 5756835,… 30760. Gisb… North      8386.      48500\n 4 ((2009450 5761922, 2009383 5761988,… 28458. Gisb… North      8386.      48500\n 5 ((2059935 5763492, 2059842 5763462,… 29961. Gisb… North      8386.      48500\n 6 ((2027788 5774462, 2027789 5774211,… 25386. Gisb… North      8386.      48500\n 7 ((2035023 5793818, 2035107 5793618,… 28251. Gisb… North      8386.      48500\n 8 ((2064446 5774410, 2064479 5774661,… 28476. Gisb… North      8386.      48500\n 9 ((2083085 5804913, 2082742 5805001,… 29663. Gisb… North      8386.      48500\n10 ((1998917 5702907, 1998927 5702908,…  9291. Gisb… North      8386.      48500\n# ℹ 276 more rows\n# ℹ 2 more variables: Median_income &lt;int&gt;, Sex_ratio &lt;dbl&gt;\n\n\nThe join parameter allows you to add any other type of DE-9IM relation, including your own. So, if we want to get those river linestrings that are within the gisborne object we would use sf::st_within().\n\nrivers |&gt; st_join(gisborne, left = FALSE, join = st_within)\n\nSimple feature collection with 248 features and 7 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 1967989 ymin: 5687240 xmax: 2085682 ymax: 5829458\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n# A tibble: 248 × 8\n                                   geom length Name  Island Land_area Population\n *                &lt;MULTILINESTRING [m]&gt;    [m] &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 ((2047236 5739047, 2047119 5738963,… 55146. Gisb… North      8386.      48500\n 2 ((2009450 5761922, 2009383 5761988,… 28458. Gisb… North      8386.      48500\n 3 ((2059935 5763492, 2059842 5763462,… 29961. Gisb… North      8386.      48500\n 4 ((2027788 5774462, 2027789 5774211,… 25386. Gisb… North      8386.      48500\n 5 ((2064446 5774410, 2064479 5774661,… 28476. Gisb… North      8386.      48500\n 6 ((1998917 5702907, 1998927 5702908,…  9291. Gisb… North      8386.      48500\n 7 ((2001680 5712195, 2001746 5712112,…  8166. Gisb… North      8386.      48500\n 8 ((2068319 5787066, 2067617 5787365,…  6851. Gisb… North      8386.      48500\n 9 ((2058857 5789186, 2058757 5789287,…  8277. Gisb… North      8386.      48500\n10 ((2070487 5798783, 2070335 5799153,…  8971. Gisb… North      8386.      48500\n# ℹ 238 more rows\n# ℹ 2 more variables: Median_income &lt;int&gt;, Sex_ratio &lt;dbl&gt;\n\n\nIf we don’t want to do a join, that is if we don’t want to bring in the columns from the second dataset, we can use sf::st_filter(). We can also specify the DE-9IM relation here with the parameter .predicate\n\nrivers |&gt; st_filter(gisborne, .predicate = st_within)\n\nSimple feature collection with 248 features and 1 field\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 1967989 ymin: 5687240 xmax: 2085682 ymax: 5829458\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n# A tibble: 248 × 2\n                                                                     geom length\n *                                                  &lt;MULTILINESTRING [m]&gt;    [m]\n 1 ((2047236 5739047, 2047119 5738963, 2047119 5738846, 2047002 5738779,… 55146.\n 2 ((2009450 5761922, 2009383 5761988, 2009365 5762322, 2009332 5762372,… 28458.\n 3 ((2059935 5763492, 2059842 5763462, 2059015 5763608, 2059005 5763649,… 29961.\n 4 ((2027788 5774462, 2027789 5774211, 2027839 5774111, 2027956 5773978,… 25386.\n 5 ((2064446 5774410, 2064479 5774661, 2064680 5774745, 2064713 5774812,… 28476.\n 6 ((1998917 5702907, 1998927 5702908, 1999151 5702924, 1999234 5702834,…  9291.\n 7 ((2001680 5712195, 2001746 5712112, 2001747 5711995, 2001663 5711761,…  8166.\n 8 ((2068319 5787066, 2067617 5787365, 2067366 5787398, 2067249 5787482,…  6851.\n 9 ((2058857 5789186, 2058757 5789287, 2058590 5789253, 2058556 5789286,…  8277.\n10 ((2070487 5798783, 2070335 5799153, 2070277 5799363, 2070312 5799653,…  8971.\n# ℹ 238 more rows\n\n\nThis is a small plot of the difference between st_intersects and st_within.\n\n\nCode\npar(mar = c(0,0,2,0))\nint = rivers |&gt; st_filter(gisborne, .predicate = st_intersects)\nwith = rivers |&gt; st_filter(gisborne, .predicate = st_within)\nplot(gisborne$geom, border = \"red\", col = NA, main = \"st_intersects\")\nplot(rivers$geom, col = \"grey90\", alpha = 0.5, add = TRUE)\nplot(int$geom, col = \"blue\", add = TRUE)\nplot(gisborne$geom, border = \"red\", col = NA, main = \"st_within\")\nplot(rivers$geom, col = \"grey90\", alpha = 0.5, add = TRUE)\nplot(with$geom, col = \"blue\", add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDE-9IM concepts\n\n\n\n Section in Spatial Data Science (Pebesma_2023?)\n Section in Geocomputation with R (lovelace_geocomputation_2019?)."
  },
  {
    "objectID": "vector.html#plot-spatial-data",
    "href": "vector.html#plot-spatial-data",
    "title": "2  Vector data",
    "section": "2.4 Plot spatial data",
    "text": "2.4 Plot spatial data\nSome plots have already been shown in the sections above, but let’s look at this with more attention now.\n\n2.4.1 Base R\nsf has a base plot method, which will plot in small subsets the different columns of the geospatial dataset.\n\nplot(nz)\n\n\n\n\nThis is a great way to get a quick glance at how the data look likes.\n\n\n2.4.2 ggplot2\nThere is a ggplot method for sf objects, where we use the ggplot2::geom_sf() function to plot the sf layer. As normal, we can call color and fill options with the data columns. There is no need to specify any x/y coordinates since the geometry is recognised automatically.\n\nggplot(nz) +\n  geom_sf(aes(fill = Population))\n\n\n\n\n\n\n2.4.3 tmap v.4\ntmap is another option for plotting spatial features. The package is on its way to a new version, with several breaking changes. Therefore, in this repository we have installed version 4 (the newer version) to showcase its usage.\n\ntm_shape(nz) +\n  tm_fill(\"Name\") +\n  tm_shape(rivers) +\n  tm_lines(col = \"white\", lwd = 0.7) +\n  tm_scalebar()\n\n\n\n\n\n\n2.4.4 mapview\nFinally, R has packages for interactive maps as well. While tmap can display some nice interactive maps, another option is mapview.\n\nmapview(nz, zcol = \"Median_income\")\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can find links to other R packages and resources for data visualisation here.\n\n\n\n\n\n\nAppelhans, Tim, Florian Detsch, Christoph Reudenbach, and Stefan Woellauer. 2023. Mapview: Interactive Viewing of Spatial Data in r. https://github.com/r-spatial/mapview.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2024. Sf: Simple Features for r. https://r-spatial.github.io/sf/.\n\n\nPebesma, Edzer, and Roger Bivand. 2023. Spatial Data Science: With applications in R. Chapman and Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nTennekes, Martijn. 2018. “tmap: Thematic Maps in R.” Journal of Statistical Software 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\n———. 2023. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, Dewey Dunnington, and Teun van den Brand. 2024. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://ggplot2.tidyverse.org."
  },
  {
    "objectID": "raster.html#raster-vector-operations",
    "href": "raster.html#raster-vector-operations",
    "title": "3  Raster data",
    "section": "3.1 Raster-vector operations",
    "text": "3.1 Raster-vector operations\nWe use here datasets from the spDataLarge package. Similar to spData this is a data package. The data consists of terrain derivatives and a set of landslide locations in Ecuador. The data is used for landslide susceptibility assessment.\nWe call two vector datasets, lsl and study_mask first. We convert lsl into an sf object with sf::st_as_sf().\n\ndata(\"lsl\", \"study_mask\", package = \"spDataLarge\")\nlandslides = st_as_sf(\n  lsl,\n  coords = c(\"x\", \"y\"), \n  crs = \"EPSG:32717\"\n)\n\nAs for the raster data, we use terra::rast() in this case. We call the data from its location on file for this using system.file().\n\nterrain = rast(system.file(\"raster/ta.tif\", package = \"spDataLarge\"))\nterrain\n\nclass       : SpatRaster \ndimensions  : 415, 383, 5  (nrow, ncol, nlyr)\nresolution  : 10, 10  (x, y)\nextent      : 711962.7, 715792.7, 9556862, 9561012  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 17S (EPSG:32717) \nsource      : ta.tif \nnames       :    slope,      cplan,      cprof,     elev, log10_carea \nmin values  :  0.00000, -25.697536, -0.3194027, 1711.204,    2.000000 \nmax values  : 76.17377,   4.267366,  0.1368342, 3164.165,    5.733915 \n\n\n\n3.1.1 Masking\nNow, the first operation we apply to this raster data is a mask. We use the study_mask object we loaded above to crop our data to a polygon.\n\nterrain = mask(terrain, study_mask)\n\nLet’s take a first glance of our data using tmap. Here we plot the terrain derivatives and the landslide points in separate subplots.\n\ntm_shape(terrain) +\n  tm_raster(\n    col.scale = tm_scale_continuous(midpoint = NA),\n    col.legend = tm_legend(orientation = \"landscape\")\n  ) +\n  tm_facets_hstack() +\n  tm_shape(landslides) +\n  tm_dots() \n\n\n\n\n\n\n3.1.2 Extraction\nAnother common operation is to extract raster values at point locations. We can easily do this using terra::extract().\n\nhead(terra::extract(terrain, landslides))\n\n  ID    slope        cplan        cprof     elev log10_carea\n1  1 33.75185  0.023180449  0.003193061 2422.810    2.784319\n2  2 39.40821 -0.038638908 -0.017187813 2051.771    4.146012\n3  3 37.45409 -0.013329108  0.009671087 1957.832    3.643556\n4  4 31.49607  0.040931452  0.005888638 1968.621    2.268703\n5  5 44.07456  0.009686948  0.005149810 3007.774    3.003426\n6  6 29.85981 -0.009047707 -0.005738329 1736.887    3.174073\n\n\nWe did not save the result of this since the landslides object already has the corresponding columns.\n\nlandslides\n\nSimple feature collection with 350 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 712197.7 ymin: 9556947 xmax: 715737.7 ymax: 9560807\nProjected CRS: WGS 84 / UTM zone 17S\nFirst 10 features:\n   lslpts    slope        cplan        cprof     elev log10_carea\n1   FALSE 33.75185  0.023180449  0.003193061 2422.810    2.784319\n2   FALSE 39.40821 -0.038638908 -0.017187813 2051.771    4.146013\n3   FALSE 37.45409 -0.013329108  0.009671087 1957.832    3.643556\n4   FALSE 31.49607  0.040931452  0.005888638 1968.621    2.268703\n5   FALSE 44.07456  0.009686948  0.005149810 3007.774    3.003426\n6   FALSE 29.85981 -0.009047707 -0.005738329 1736.887    3.174073\n7   FALSE 31.57465  0.055624146  0.021838507 2583.551    2.251919\n8   FALSE 53.42223  0.005728012  0.001018965 2522.235    2.583303\n9   FALSE 32.60400  0.024040293 -0.016939975 1929.097    2.836454\n10  FALSE 37.45409 -0.013329108  0.009671087 1957.832    3.643556\n                   geometry\n1  POINT (713887.7 9558537)\n2  POINT (712787.7 9558917)\n3  POINT (713407.7 9560307)\n4  POINT (714887.7 9560237)\n5  POINT (715247.7 9557117)\n6  POINT (714927.7 9560777)\n7  POINT (714287.7 9558367)\n8  POINT (714147.7 9558467)\n9  POINT (713717.7 9560657)\n10 POINT (713407.7 9560307)\n\n\n\n\n3.1.3 Predictions\nOnce we have extracted the data from the terrain derivatives at the landslide point locations, we can proceed to create a generalized linear model (GLM)\n\nfit = glm(lslpts ~ slope + cplan + cprof + elev + log10_carea,\n          family = binomial(), data = landslides)\n\nAnd next we can use the terra::predict() function to apply the model to our terrain data.\n\npred = predict(terrain, model = fit, type = \"response\")\n\n\n\nCode\ntm_shape(pred) +\n  tm_raster(\n    col.scale = tm_scale_continuous(midpoint = NA, values = \"-viridis\"),\n    col.legend = tm_legend(\n      title = \"\",\n      position = tm_pos_in(\"left\", \"bottom\"),\n      width = 10,\n      frame = FALSE,\n      orientation = \"landscape\"\n    )\n  ) +\n  tm_title(\"Landslide susceptibility\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical learning\n\n\n\n For the full example on landslide susceptibility, visit the Statistical learning chapter in Geocomputation with R."
  },
  {
    "objectID": "raster.html#data-cubes",
    "href": "raster.html#data-cubes",
    "title": "3  Raster data",
    "section": "3.2 Data cubes",
    "text": "3.2 Data cubes\n\n3.2.1 Satellite imagery\n\ntif = system.file(\"tif/L7_ETMs.tif\", package = \"stars\")\nl7 = read_stars(tif)\nplot(l7, axes = TRUE)\n\n\n\n\n\nl7\n\nstars object with 3 dimensions and 1 attribute\nattribute(s):\n             Min. 1st Qu. Median     Mean 3rd Qu. Max.\nL7_ETMs.tif     1      54     69 68.91242      86  255\ndimension(s):\n     from  to  offset delta                     refsys point x/y\nx       1 349  288776  28.5 SIRGAS 2000 / UTM zone 25S FALSE [x]\ny       1 352 9120761 -28.5 SIRGAS 2000 / UTM zone 25S FALSE [y]\nband    1   6      NA    NA                         NA    NA    \n\nl7[,,,3:4]\n\nstars object with 3 dimensions and 1 attribute\nattribute(s):\n             Min. 1st Qu. Median     Mean 3rd Qu. Max.\nL7_ETMs.tif     9      50     63 61.79714      76  255\ndimension(s):\n     from  to  offset delta                     refsys point x/y\nx       1 349  288776  28.5 SIRGAS 2000 / UTM zone 25S FALSE [x]\ny       1 352 9120761 -28.5 SIRGAS 2000 / UTM zone 25S FALSE [y]\nband    3   4      NA    NA                         NA    NA    \n\n\n\nplot(l7, rgb = c(3,2,1), reset = FALSE, main = \"RGB\")    # rgb\nplot(l7, rgb = c(4,3,2), main = \"False colour (NIR-G-B)\") # false colour\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Applying functions\n\nfn_ndvi = function(red,nir) (nir-red)/(nir+red)\nndvi = st_apply(l7[,,,3:4], 1:2, fn_ndvi)\n\n\ntm_shape(ndvi) +\n  tm_raster(col.scale = tm_scale_continuous(values = \"prgn\", midpoint = 0))\n\n\n\n\n\n\n3.2.3 Climate data\n\nprecipitation = system.file(\"nc/test_stageiv_xyt.nc\", package = \"stars\") |&gt;\n    read_stars()\nprecipitation\n\nstars object with 3 dimensions and 1 attribute\nattribute(s):\n                             Min. 1st Qu. Median     Mean 3rd Qu.   Max.\ntest_stageiv_xyt.nc [kg/m^2]    0       0   0.75 4.143009    4.63 163.75\ndimension(s):\n     from  to                  offset   delta  refsys\nx       1  87                      NA      NA  WGS 84\ny       1 118                      NA      NA  WGS 84\ntime    1  23 2018-09-13 19:00:00 UTC 1 hours POSIXct\n                                 values x/y\nx    [87x118] -80.61 [°],...,-74.88 [°] [x]\ny      [87x118] 32.44 [°],...,37.62 [°] [y]\ntime                               NULL    \ncurvilinear grid\n\n\n\nnc = system.file(\"gpkg/nc.gpkg\", package = \"sf\") |&gt; \n  read_sf() |&gt; \n  st_transform(st_crs(precipitation))\n\n\nnc_outline = nc |&gt; \n  st_geometry() |&gt; \n  st_union()\n\n\nggplot() +\n  geom_stars(data = precipitation[,,,1:12]) +\n  scale_fill_viridis_c(\"Precipitation\") +\n  geom_sf(data = nc_outline, fill = NA, color = \"red\") +\n  facet_wrap(\"time\", ncol = 4) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n3.2.4 Time series and aggregations\n\nprecipitation_nc = aggregate(precipitation, by = nc, FUN = max)\n\n\nplot(precipitation_nc, max.plot = 23, border = \"grey\", \n     lwd = 0.5, mfrow = c(5,5))\n\n\n\n\n\n\nCode\nprecipitation_nc |&gt; st_as_sf(long = TRUE) |&gt;\n  st_join(nc) |&gt; \n  ggplot() + \n  aes(\n    x = as.POSIXct(time),\n    y = test_stageiv_xyt.nc\n  ) + \n  geom_point() + geom_line() +\n  scale_x_datetime(date_breaks = \"12 hours\", date_labels = \"%H:%M\") +\n  theme(legend.position = \"none\") +\n  labs(x = \"Time\", y = \"Precipitation (mm)\") +\n  facet_wrap(~NAME)\n\n\n\n\n\n\nindex_max = function(x) ifelse(all(is.na(x)), NA, which.max(x))\nprecipitation_max = st_apply(precipitation_nc, \"geom\", index_max)\n\n\nprecipitation_max$when = st_get_dimension_values(\n  precipitation_nc, \"time\")[precipitation_max$index_max]\n\n\nplot(precipitation_max[\"when\"], key.pos = 1, \n     main = \"time of maximum precipitation\")\n\n\n\n\n\n\n\n\nHijmans, Robert J. 2024. Terra: Spatial Data Analysis. https://rspatial.org/.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2023. Stars: Spatiotemporal Arrays, Raster and Vector Data Cubes. https://r-spatial.github.io/stars/.\n\n\n———. 2024. Sf: Simple Features for r. https://r-spatial.github.io/sf/.\n\n\nPebesma, Edzer, and Roger Bivand. 2023a. Spatial Data Science: With applications in R. Chapman and Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\n———. 2023b. Spatial Data Science: With applications in R. London: Chapman; Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\nPebesma, Edzer, Thomas Mailund, and James Hiebert. 2016. “Measurement Units in R.” R Journal 8 (2): 486–94. https://doi.org/10.32614/RJ-2016-061.\n\n\nPebesma, Edzer, Thomas Mailund, Tomasz Kalinowski, and Iñaki Ucar. 2023. Units: Measurement Units for r Vectors. https://r-quantities.github.io/units/.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nTennekes, Martijn. 2018. “tmap: Thematic Maps in R.” Journal of Statistical Software 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\n———. 2023. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, Dewey Dunnington, and Teun van den Brand. 2024. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://ggplot2.tidyverse.org."
  },
  {
    "objectID": "resources.html#books",
    "href": "resources.html#books",
    "title": "Further resources",
    "section": "Books:",
    "text": "Books:\n\nSpatial Data Science with Applications in R by (Pebesma_2023?)\nGeocomputation with R by (lovelace_geocomputation_2019?)"
  },
  {
    "objectID": "resources.html#blogs-articles",
    "href": "resources.html#blogs-articles",
    "title": "Further resources",
    "section": "Blogs & Articles:",
    "text": "Blogs & Articles:\n\nR libraries for geoscience by Danny Coutts\n“Potential use of R-statistical programming in the field of geoscience” by (Bishwal_2017?) in International Conference for Convergence of Technology (I2CT)."
  },
  {
    "objectID": "resources.html#bridges-to-gis-software",
    "href": "resources.html#bridges-to-gis-software",
    "title": "Further resources",
    "section": "Bridges to GIS software:",
    "text": "Bridges to GIS software:\n\nGRASS with {rgrass} by (Bivand_rgrass?)\nSAGA with {RSAGA} by (Brenning_rsaga?)\nQGIS with {qgisprocess} by (Dunnington_qgisprocess?)\nArcGIS with {arcgisbinding} by (Aydin_2024?)\n\n\n\n\n\nHijmans, Robert J. 2024. Terra: Spatial Data Analysis. https://rspatial.org/.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2023. Stars: Spatiotemporal Arrays, Raster and Vector Data Cubes. https://r-spatial.github.io/stars/.\n\n\n———. 2024. Sf: Simple Features for r. https://r-spatial.github.io/sf/.\n\n\nPebesma, Edzer, and Roger Bivand. 2023a. Spatial Data Science: With applications in R. Chapman and Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\n———. 2023b. Spatial Data Science: With applications in R. London: Chapman; Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\nPebesma, Edzer, Thomas Mailund, and James Hiebert. 2016. “Measurement Units in R.” R Journal 8 (2): 486–94. https://doi.org/10.32614/RJ-2016-061.\n\n\nPebesma, Edzer, Thomas Mailund, Tomasz Kalinowski, and Iñaki Ucar. 2023. Units: Measurement Units for r Vectors. https://r-quantities.github.io/units/.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nTennekes, Martijn. 2018. “tmap: Thematic Maps in R.” Journal of Statistical Software 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\n———. 2023. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, Dewey Dunnington, and Teun van den Brand. 2024. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://ggplot2.tidyverse.org."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Hijmans, Robert J. 2024. Terra: Spatial Data Analysis. https://rspatial.org/.\n\n\nPebesma, Edzer. 2018. “Simple Features for R:\nStandardized Support for Spatial Vector Data.”\nThe R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2023. Stars: Spatiotemporal Arrays, Raster and Vector Data\nCubes. https://r-spatial.github.io/stars/.\n\n\n———. 2024. Sf: Simple Features for r. https://r-spatial.github.io/sf/.\n\n\nPebesma, Edzer, and Roger Bivand. 2023a. Spatial Data Science: With applications in R.\nChapman and Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\n———. 2023b. Spatial Data Science: With\napplications in R. London: Chapman; Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\nPebesma, Edzer, Thomas Mailund, and James Hiebert. 2016.\n“Measurement Units in R.” R Journal 8\n(2): 486–94. https://doi.org/10.32614/RJ-2016-061.\n\n\nPebesma, Edzer, Thomas Mailund, Tomasz Kalinowski, and Iñaki Ucar. 2023.\nUnits: Measurement Units for r Vectors. https://r-quantities.github.io/units/.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\nTennekes, Martijn. 2018. “tmap:\nThematic Maps in R.” Journal of Statistical\nSoftware 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\n———. 2023. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data\nAnalysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen,\nKohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, Dewey\nDunnington, and Teun van den Brand. 2024. Ggplot2: Create Elegant\nData Visualisations Using the Grammar of Graphics. https://ggplot2.tidyverse.org."
  }
]